name: Docker Image and K8s CI/CD

on:
  release:
    types: [published]
    branches: [ master ]

jobs:

  admin_frontend:
    runs-on: ubuntu-latest
       
    steps:
      - uses: actions/checkout@v2
        
      - name: Build and push docker image
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: k8tan/admin_frontend
          tags: latest
          tag_with_sha: true
          path: admin_frontend

  cart_db:
    runs-on: ubuntu-latest
       
    steps:
      - uses: actions/checkout@v2
        
      - name: Build and push docker image
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: k8tan/cart_db
          tags: latest
          tag_with_sha: true
          path: cart_db

  cart_microservice:
    runs-on: ubuntu-latest
       
    steps:
      - uses: actions/checkout@v2
        
      - name: Build and push docker image
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: k8tan/cart_microservice
          tags: latest
          tag_with_sha: true
          path: cart_microservice
        
  orders_db:
    runs-on: ubuntu-latest
       
    steps:
      - uses: actions/checkout@v2
        
      - name: Build and push docker image
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: k8tan/orders_db
          tags: latest
          tag_with_sha: true
          path: orders_db
 
  orders_microservice:
    runs-on: ubuntu-latest
       
    steps:
      - uses: actions/checkout@v2
        
      - name: Build and push docker image
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: k8tan/orders_microservice
          tags: latest
          tag_with_sha: true
          path: orders_microservice

  product_db:
    runs-on: ubuntu-latest
       
    steps:
      - uses: actions/checkout@v2
        
      - name: Build and push docker image
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: k8tan/product_db
          tags: latest
          tag_with_sha: true
          path: product_db
          
  product_microservice:
    runs-on: ubuntu-latest
       
    steps:
      - uses: actions/checkout@v2
        
      - name: Build and push docker image
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: k8tan/product_microservice
          tags: latest
          tag_with_sha: true
          path: product_microservice

  web_frontend:
    runs-on: ubuntu-latest
       
    steps:
      - uses: actions/checkout@v2
        
      - name: Build and push docker image
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: k8tan/web_frontend
          tags: latest
          tag_with_sha: true
          path: web_frontend

  deploy_to_eks:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: [admin_frontend, cart_db, orders_db, product_db, cart_microservice, orders_microservice, product_microservice, web_frontend] 

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
    
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Get aws-iam-authenticator, set Kubeconfig, and deploy to EKS
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        run: |
          echo $GITHUB_WORKSPACE
          pwd
          curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.16.8/2020-04-16/bin/linux/amd64/aws-iam-authenticator
          chmod +x ./aws-iam-authenticator
          mkdir -p $HOME/bin && cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator && export PATH=$PATH:$HOME/bin
          aws-iam-authenticator help     
          echo ${KUBE_CONFIG_DATA} | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          # Redeploy pods and services from folder of yaml files
          kubectl replace --force -f  ./deploy/kubernetes/
